// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-lego/cache/driver (interfaces: Driver)

// Package mock is a generated GoMock package.
package mock

import (
	driver "github.com/go-lego/cache/driver"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDriver is a mock of Driver interface
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// Decr mocks base method
func (m *MockDriver) Decr(arg0, arg1 string) (string, error) {
	ret := m.ctrl.Call(m, "Decr", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decr indicates an expected call of Decr
func (mr *MockDriverMockRecorder) Decr(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decr", reflect.TypeOf((*MockDriver)(nil).Decr), arg0, arg1)
}

// Del mocks base method
func (m *MockDriver) Del(arg0 string) error {
	ret := m.ctrl.Call(m, "Del", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del
func (mr *MockDriverMockRecorder) Del(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockDriver)(nil).Del), arg0)
}

// Exists mocks base method
func (m *MockDriver) Exists(arg0 string) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockDriverMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockDriver)(nil).Exists), arg0)
}

// Expire mocks base method
func (m *MockDriver) Expire(arg0 string, arg1 int64) error {
	ret := m.ctrl.Call(m, "Expire", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Expire indicates an expected call of Expire
func (mr *MockDriverMockRecorder) Expire(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockDriver)(nil).Expire), arg0, arg1)
}

// Get mocks base method
func (m *MockDriver) Get(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDriverMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDriver)(nil).Get), arg0)
}

// HDecr mocks base method
func (m *MockDriver) HDecr(arg0, arg1, arg2 string) (string, error) {
	ret := m.ctrl.Call(m, "HDecr", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HDecr indicates an expected call of HDecr
func (mr *MockDriverMockRecorder) HDecr(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HDecr", reflect.TypeOf((*MockDriver)(nil).HDecr), arg0, arg1, arg2)
}

// HDel mocks base method
func (m *MockDriver) HDel(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "HDel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HDel indicates an expected call of HDel
func (mr *MockDriverMockRecorder) HDel(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HDel", reflect.TypeOf((*MockDriver)(nil).HDel), arg0, arg1)
}

// HExists mocks base method
func (m *MockDriver) HExists(arg0, arg1 string) (bool, error) {
	ret := m.ctrl.Call(m, "HExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HExists indicates an expected call of HExists
func (mr *MockDriverMockRecorder) HExists(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HExists", reflect.TypeOf((*MockDriver)(nil).HExists), arg0, arg1)
}

// HGet mocks base method
func (m *MockDriver) HGet(arg0, arg1 string) (string, error) {
	ret := m.ctrl.Call(m, "HGet", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGet indicates an expected call of HGet
func (mr *MockDriverMockRecorder) HGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGet", reflect.TypeOf((*MockDriver)(nil).HGet), arg0, arg1)
}

// HGetAll mocks base method
func (m *MockDriver) HGetAll(arg0 string) (map[string]string, error) {
	ret := m.ctrl.Call(m, "HGetAll", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGetAll indicates an expected call of HGetAll
func (mr *MockDriverMockRecorder) HGetAll(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetAll", reflect.TypeOf((*MockDriver)(nil).HGetAll), arg0)
}

// HIncr mocks base method
func (m *MockDriver) HIncr(arg0, arg1, arg2 string) (string, error) {
	ret := m.ctrl.Call(m, "HIncr", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HIncr indicates an expected call of HIncr
func (mr *MockDriverMockRecorder) HIncr(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HIncr", reflect.TypeOf((*MockDriver)(nil).HIncr), arg0, arg1, arg2)
}

// HMGet mocks base method
func (m *MockDriver) HMGet(arg0 string, arg1 []string) (map[string]string, error) {
	ret := m.ctrl.Call(m, "HMGet", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HMGet indicates an expected call of HMGet
func (mr *MockDriverMockRecorder) HMGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMGet", reflect.TypeOf((*MockDriver)(nil).HMGet), arg0, arg1)
}

// HMSet mocks base method
func (m *MockDriver) HMSet(arg0 string, arg1 map[string]string) error {
	ret := m.ctrl.Call(m, "HMSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HMSet indicates an expected call of HMSet
func (mr *MockDriverMockRecorder) HMSet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMSet", reflect.TypeOf((*MockDriver)(nil).HMSet), arg0, arg1)
}

// HSet mocks base method
func (m *MockDriver) HSet(arg0, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "HSet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HSet indicates an expected call of HSet
func (mr *MockDriverMockRecorder) HSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSet", reflect.TypeOf((*MockDriver)(nil).HSet), arg0, arg1, arg2)
}

// Incr mocks base method
func (m *MockDriver) Incr(arg0, arg1 string) (string, error) {
	ret := m.ctrl.Call(m, "Incr", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Incr indicates an expected call of Incr
func (mr *MockDriverMockRecorder) Incr(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockDriver)(nil).Incr), arg0, arg1)
}

// Init mocks base method
func (m *MockDriver) Init() error {
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockDriverMockRecorder) Init() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockDriver)(nil).Init))
}

// MGet mocks base method
func (m *MockDriver) MGet(arg0 []string) (map[string]string, error) {
	ret := m.ctrl.Call(m, "MGet", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGet indicates an expected call of MGet
func (mr *MockDriverMockRecorder) MGet(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockDriver)(nil).MGet), arg0)
}

// MSet mocks base method
func (m *MockDriver) MSet(arg0 map[string]string) error {
	ret := m.ctrl.Call(m, "MSet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MSet indicates an expected call of MSet
func (mr *MockDriverMockRecorder) MSet(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSet", reflect.TypeOf((*MockDriver)(nil).MSet), arg0)
}

// Options mocks base method
func (m *MockDriver) Options() driver.Options {
	ret := m.ctrl.Call(m, "Options")
	ret0, _ := ret[0].(driver.Options)
	return ret0
}

// Options indicates an expected call of Options
func (mr *MockDriverMockRecorder) Options() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockDriver)(nil).Options))
}

// Set mocks base method
func (m *MockDriver) Set(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockDriverMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockDriver)(nil).Set), arg0, arg1)
}
